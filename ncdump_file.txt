netcdf cql3d {
dimensions:
	xdim = 500 ;
	ydim = 240 ;
	xdimf = 500 ;
	ydimf = 240 ;
	rdim = 55 ;
	r0dim = 55 ;
	kzdim = 131 ;
	kedim = 3 ;
	kbdim = 16 ;
	ngenadim = 4 ;
	lrzadim = 128 ;
	twodim = 2 ;
	fourdim = 4 ;
	fivedim = 5 ;
	thirteendim = 13 ;
	r00dim = 56 ;
	zdim = 80 ;
	nendim = 120 ;
	nvdim = 66 ;
	nen_npadim = 60 ;
	nv_npadim = 1 ;
	npaproc_dim = 1 ;
	mrfnp1_dim = 7 ;
	mrfnp3_dim = 9 ;
	nmodsdim = 155 ;
	ntavgdim = 16 ;
	gen_species_dim = 2 ;
	species_dim = 5 ;
	nt_deltadim = 80 ;
	nr_deltadim = 65 ;
	nz_deltadim = 65 ;
	chardim = 8 ;
	char64dim = 64 ;
	impur_dim = 1 ;
	tdim = 201 ;
	tsavedim = 1 ;
variables:
	char version(char64dim) ;
		version:long_name = "CQL3D version number" ;
	char mnemonic(char64dim) ;
		mnemonic:long_name = "Mnemonic run identifier" ;
	char ampfmod(chardim) ;
		ampfmod:long_name = "Ampere-Faraday module switc" ;
	char urfmod(chardim) ;
		urfmod:long_name = "URF module switch" ;
	char rdcmod(chardim) ;
		rdcmod:long_name = "RF Heating and CD from input diffusion coeffs" ;
	char frmod(chardim) ;
		frmod:long_name = "NBI module switch" ;
	char beamplse(chardim) ;
		beamplse:long_name = "Pulsed NBI switch" ;
	char transp(chardim) ;
		transp:long_name = "Radial transport module switch" ;
	char tavg(chardim) ;
		tavg:long_name = "except in netcdfshort=longer_f case" ;
	char f4d_out(chardim) ;
		f4d_out:long_name = "Indicates output for 4D distn/ separate file" ;
	char netcdfshort(chardim) ;
		netcdfshort:long_name = "Indicates level of output of data to .nc files" ;
	char eqdskin(char64dim) ;
		eqdskin:long_name = "Name of input eqdsk, for eqsource=eqdsk" ;
	int ngen ;
		ngen:long_name = "Number of general species" ;
	int ntotal ;
		ntotal:long_name = "Number of species: gen+max" ;
	char kspeci(species_dim, twodim, chardim) ;
		kspeci:long_name = "Name of species and spec as general or maxwl" ;
	double bnumb(species_dim) ;
		bnumb:long_name = "atomic number or each species" ;
	double fmass(species_dim) ;
		fmass:long_name = "mass of each species" ;
		fmass:units = "grams" ;
	int lrzmax ;
		lrzmax:long_name = "Number of radial bins(=r0dim, .ge.lrz)" ;
	char radcoord(chardim) ;
		radcoord:long_name = "Radial coordinate is proportional to radcoord" ;
	double rya(r0dim) ;
		rya:long_name = "Normalized radial mesh at bin centers" ;
	double Rp(r0dim) ;
		Rp:long_name = "Major radius of bin centers at outerboard" ;
	double Rm(r0dim) ;
		Rm:long_name = "Major radius of bin centers at innerboard" ;
	double rhomax ;
		rhomax:long_name = "Generalized plasma minor radius" ;
		rhomax:units = "cms" ;
	double radmaj ;
		radmaj:long_name = "Nominal major radius" ;
		radmaj:units = "cms" ;
	double rpmconz(r00dim) ;
		rpmconz:long_name1 = "Major radius of bin boundaries on the outer" ;
		rpmconz:long_name2 = "equatorial plane, starting at radmaj" ;
		rpmconz:units = "cms" ;
	double btor ;
		btor:long_name = "Nominal tor mag fld at radmaj" ;
		btor:units = "Gauss" ;
	double toteqd ;
		toteqd:long_name = "Tor equilibrium plasma current" ;
		toteqd:units = "Amps" ;
	double rgeomp ;
		rgeomp:long_name = "0.5*(max-min) of major radius" ;
		rgeomp:units = "cms" ;
	double r0geomp ;
		r0geomp:long_name = "0.5*(max+min) of major radius" ;
		r0geomp:units = "cms" ;
	double rmag ;
		rmag:long_name = "Magnetic axis major radius" ;
		rmag:units = "cms" ;
	double zmag ;
		zmag:long_name = "Magnetic axis vertical position" ;
		zmag:units = "cms" ;
	char eqsym(chardim) ;
		eqsym:long_name = "Indicator for symmetrization" ;
	double zshift ;
		zshift:long_name = "Vertical shift of equilibrium per eqsym" ;
		zshift:units = "cms" ;
	double eps0 ;
		eps0:long_name = "Inv aspect ratio = rgeomp/r0geom" ;
	double elong ;
		elong:long_name = "Elongation = zgeomp/rgeomp" ;
	double zgeomp ;
		zgeomp:long_name = "Approx half-height to LCFS" ;
		zgeomp:units = "cms" ;
	double rgeom1 ;
		rgeom1:long_name = "Approx inner major radius to LCFS" ;
		rgeom1:units = "cms" ;
	double rgeom2 ;
		rgeom2:long_name = "Approx outer major radius to LCFS" ;
		rgeom2:units = "cms" ;
	double area(r0dim) ;
		area:long_name = "Cumulative area to bin centers" ;
		area:units = "cms^2" ;
	double darea(r0dim) ;
		darea:long_name = "Incremental tor area of radial bins" ;
		darea:units = "cms^2" ;
	double vol(r0dim) ;
		vol:long_name = "Cumulative volume to bin centers" ;
		vol:units = "cms^3" ;
	double dvol(r0dim) ;
		dvol:long_name = "Incremental volume to bin centers" ;
		dvol:units = "cms^3" ;
	double equilpsi(r0dim) ;
		equilpsi:long_name = "Poloidal flux function at bin centers" ;
		equilpsi:units = "cgs" ;
	double psivalm(r0dim) ;
		psivalm:long_name = "Pol flux fctn at radial outer edge of each bin" ;
		psivalm:units = "cgs" ;
	double dpsi(r0dim) ;
		dpsi:long_name = "Incremental pol flux function at bin centers" ;
		dpsi:units = "cgs" ;
	double psimag ;
		psimag:long_name = "Pol flux function at magnetic axis" ;
		psimag:units = "cgs" ;
	double psilim ;
		psilim:long_name = "Pol flux function at plasma boundary" ;
		psilim:units = "cgs" ;
	double h_r(r0dim) ;
		h_r:long_name = "H*rho ONETWO geometry factor" ;
		h_r:units = "cms" ;
	double qsafety(r0dim) ;
		qsafety:long_name = "Safety factor at bin centers" ;
	double curreq(r0dim) ;
		curreq:long_name = "Toroidal current density from EQDSK" ;
		curreq:units = "Amps/cm**" ;
	int lrz ;
		lrz:long_name = "Number of FPd radial surface bins (=rdim)" ;
	int lrindx(rdim) ;
		lrindx:long_name = "Radial indices of FPd surfaces" ;
	int jx ;
		jx:long_name = "momentum-per-mass dimension (=xdim)" ;
	double x(xdim) ;
		x:long_name = "normalized momentum-per-mass" ;
	double enerkev(xdim) ;
		enerkev:long_name = "energy=restmkev*(gamma(x(:))-1)" ;
	double uoc(xdim) ;
		uoc:long_name = "uoc=x(:)/cnorm=mom-per-mass/clight" ;
	double dx(xdim) ;
		dx:long_name = "dx centered on x-mesh points" ;
	double cint2(xdim) ;
		cint2:long_name = "x**2*dx" ;
	double vnorm ;
		vnorm:long_name = "velocity (momentum-per-mass) norm" ;
		vnorm:units = "cms/sec" ;
	double enorm ;
		enorm:long_name = "Energy normalization" ;
		enorm:units = "keV" ;
	int iy ;
		iy:long_name = "max Pitch angle dimension (=ydim)" ;
	double y(rdim, ydim) ;
		y:long_name = "pitch angle" ;
		y:units = "radians" ;
	double dy(rdim, ydim) ;
		dy:long_name = "dy centered on y-mesh points" ;
	double cynt2(rdim, ydim) ;
		cynt2:long_name = "2*pi*sin(y)*dy" ;
	int iy_(rdim) ;
		iy_:long_name = "Pitch angle dimension at each r (le ydim)" ;
	int itl(rdim) ;
		itl:long_name = "lower trapped-passing bndy index" ;
	int itu(rdim) ;
		itu:long_name = "upper trapped-passing bndy index" ;
	int lz ;
		lz:long_name = "dimension of z-grid along B" ;
	double z(r0dim, zdim) ;
		z:long_name = "Distance along B" ;
		z:units = "cms" ;
	double dz(r0dim, zdim) ;
		dz:long_name = "dz centered on z-points" ;
	double solrz(r0dim, zdim) ;
		solrz:long_name = "Major radius of z pts" ;
		solrz:units = "cms" ;
	double solzz(r0dim, zdim) ;
		solzz:long_name = "Height of z pts" ;
		solzz:units = "cms" ;
	double pol(r0dim, zdim) ;
		pol:long_name = "Poloidal angle, measured about mag axis" ;
		pol:units = "radians" ;
	double bbpsi(r0dim, zdim) ;
		bbpsi:long_name = "B(z)/B(z=0)" ;
	int imax(r0dim, zdim) ;
		imax:long_name = "Max i s.t. part passes z(l)" ;
	int lmax(r0dim, ydim) ;
		lmax:long_name = "Max l s.t. i passes z(l)" ;
	double zboun(r0dim, ydim) ;
		zboun:long_name = "Bounce point z-value" ;
		zboun:units = "cms" ;
	double zmaxpsi(r0dim) ;
		zmaxpsi:long_name = "Integral dz/bbp" ;
		zmaxpsi:units = "cms" ;
	double tau(r0dim, ydim) ;
		tau:long_name = "tau_bounce * abs(speed)" ;
		tau:units = "cms" ;
	double dtau(r0dim, zdim, ydim) ;
		dtau:long_name = "abs(speed)*dtau in dz(l)" ;
		dtau:units = "cms" ;
	double beampon ;
		beampon:long_name = "On time, per cylce, of beam" ;
		beampon:units = "secs" ;
	double beampoff ;
		beampoff:long_name = "Off time, per cylce, of beam" ;
		beampoff:units = "secs" ;
	double tavg1(ntavgdim) ;
		tavg1:long_name = "tavg case:  interval start time" ;
		tavg1:units = "secs" ;
	double tavg2(ntavgdim) ;
		tavg2:long_name = "tavg case:  interval stop time" ;
		tavg2:units = "secs" ;
	char ndeltarho(chardim) ;
		ndeltarho:long_name = "Indicates first order-orbit shift options" ;
	double bthr(r0dim) ;
		bthr:long_name = "Equil Pol B field at theta_pol=pi/2" ;
		bthr:units = "Gauss" ;
	double btoru(r0dim) ;
		btoru:long_name = "Equil Tor B field at theta_pol=pi/2" ;
		btoru:units = "Gauss" ;
	double btor0(r0dim) ;
		btor0:long_name = "Tor mag fld strength at min |B| on flux surfaces" ;
		btor0:units = "Gauss" ;
	double bmidplne(r0dim) ;
		bmidplne:long_name = "Min mag fld |B| on a rad flux surfaces" ;
		bmidplne:units = "Gauss" ;
	char efflag(chardim) ;
		efflag:long_name = "Indicates elecfld is toroidal or parallel" ;
	char softxry(chardim) ;
		softxry:long_name0 = "X-ray diagnostic is disabled,enabled, ncdf_all, or e-io" ;
		softxry:long_name1 = "Data for 1st and last step is output" ;
		softxry:long_name2 = "or, data for all steps for ncdf_all" ;
	char ipronn(chardim) ;
		ipronn:long_name0 = "disabled, default, zero neutral density" ;
		ipronn:long_name1 = "spline, give neutral density profiles vs ryain" ;
	char gamafac(chardim) ;
		gamafac:long_name0 = "energy dependent Coulomb log (default: disabled)" ;
	char pellet(chardim) ;
		pellet:long_name0 = "Pellet injection (default: disabled)" ;
	int imp_type ;
		imp_type:long_name = "Impurity type for gamafac=hesslow" ;
	int nstates ;
		nstates:long_name = "Number of charge states for impurity" ;
	double fmass_imp ;
		fmass_imp:long_name = "mass of impurity atom" ;
		fmass_imp:units = "gram" ;
	double pellet_M0 ;
		pellet_M0:long_name = "Initial mass of pellet" ;
		pellet_M0:units = "gram" ;
	double pellet_Cablation ;
		pellet_Cablation:long_name = "Coefficient for ablation rate of pellet" ;
	char npa_diag(chardim) ;
		npa_diag:long_name0 = "NPA diagnostic is disabled,enabled, or ncdf_all" ;
		npa_diag:long_name1 = "enabled: Data for 1st and last step is output" ;
		npa_diag:long_name2 = "or, ncdf_all: data for all steps for ncdf_all" ;
	char sigmamod(chardim) ;
		sigmamod:long_name0 = "fusion rates diagnostic is disabled or enabled" ;
		sigmamod:long_name1 = "Data for Rx 1:4 is output (see cqlinput_help)" ;
	double time(tdim) ;
		time:units = "seconds" ;
	double bctshift ;
		bctshift:long_name = "Time shift of bctime(), for restarts" ;
		bctshift:units = "seconds" ;
	double bctimescal ;
		bctimescal:long_name = "Scale factor of bctime(), stretching t" ;
		bctimescal:units = "seconds" ;
	int nsave(tsavedim) ;
		nsave:long_name = "Selected time steps, n.eq.nsave(1:nsavet)" ;
		nsave:units = "none" ;
	double den_e(tdim, r00dim) ;
		den_e:long_name = "Electron density" ;
		den_e:units = "/cm**3" ;
	double density(tdim, r0dim, species_dim) ;
		density:long_name = "Densities, general and Maxwellians" ;
		density:units = "/cm**3" ;
	double zeff(tdim, r0dim) ;
		zeff:long_name = "Zeff" ;
	double consn(tdim, r0dim) ;
		consn:long_name = "Particle Conservation (ptcln(lr)-ptcln_t0(lr))/ptcln_t0(lr)" ;
	double bscurr_e_gen(tdim, r0dim) ;
		bscurr_e_gen:long_name = "Bootstrap current: Hirshman-Sauter Model. e_general (FPed)" ;
	double bscurr_e_maxw(tdim, r0dim) ;
		bscurr_e_maxw:long_name = "Bootstrap current: Hirshman-Sauter Model. e_maxwellian" ;
	double bscurr_i_gen(tdim, r0dim) ;
		bscurr_i_gen:long_name = "Bootstrap current: Hirshman-Sauter Model. i_general (FPed)" ;
	double bscurr_i_maxw(tdim, r0dim) ;
		bscurr_i_maxw:long_name = "Bootstrap current: Hirshman-Sauter Model. i_maxwellian" ;
		bscurr_i_maxw:units = "A/cm**2" ;
	double currpar_starnue0(tdim, r0dim) ;
		currpar_starnue0:long_name = "Current based on sigma_banana (starnue=0)" ;
		currpar_starnue0:units = "A/cm**2" ;
	double currpar_starnue(tdim, r0dim) ;
		currpar_starnue:long_name = "Current based on sigma_coll-neo (starnue>0)" ;
		currpar_starnue:units = "A/cm**2" ;
	double temp(tdim, r0dim, species_dim) ;
		temp:units = "keV" ;
	double energy(tdim, r0dim, species_dim) ;
		energy:long_name = "FSA Energy per particle" ;
		energy:units = "keV" ;
	double wpar(tdim, gen_species_dim, rdim) ;
		wpar:long_name = "FSA Parallel Energy per particle" ;
		wpar:units = "keV" ;
	double wperp(tdim, gen_species_dim, rdim) ;
		wperp:long_name = "FSA Perpendicular Energy per particle" ;
		wperp:units = "keV" ;
	double elecfld(tdim, r00dim) ;
		elecfld:long_name = "Parallel Electric Field" ;
		elecfld:units = "Volts/cm" ;
	double edreicer(tdim, r0dim) ;
		edreicer:long_name = "E_D Dreicer elec fld, e.g., Kulsrud PRL(1973)" ;
		edreicer:units = "Volts/cm" ;
	double runaway_rate(tdim, rdim) ;
		runaway_rate:long_name0 = "Runaway rate, determined from e flux off grid" ;
		runaway_rate:long_name1 = "Runaway rate = 1/n * dn/dt / nu_Kulsrud" ;
		runaway_rate:units = "Unitless" ;
	double denra(tdim, rdim) ;
		denra:long_name0 = "Runaway FSA density above ucrit" ;
		denra:units = "/cm**3" ;
	double curra(tdim, rdim) ;
		curra:long_name0 = "Runaway FSA parallel cur density above ucrit" ;
		curra:units = "Amps/cm**2" ;
	double ucrit(tdim, rdim) ;
		ucrit:long_name0 = "Critical momentum per mass for runaway" ;
		ucrit:units = "Normalized to vnorm" ;
	char knockon(chardim) ;
		knockon:long_name0 = "Knockon src of high energy elec is en-/disabled" ;
	double sorpw_nbi(lrzadim, ngenadim) ;
		sorpw_nbi:long_name0 = "NBI+FUS Source Power Density" ;
		sorpw_nbi:units = "Watts/cm^3" ;
	double sorpw_nbii(lrzadim, ngenadim) ;
		sorpw_nbii:long_name0 = "Radially Integrated Power from NBI+FUS" ;
		sorpw_nbii:units = "Watts" ;
	int mrfn ;
		mrfn:long_name = "number of rf modes (sum over all wave types and all nharms)" ;
	double powurf(tdim, mrfnp1_dim) ;
		powurf:long_name0 = "URF power in each mode, and total" ;
		powurf:long_name1 = "powurf(1:mrfn)=power for individual modes" ;
		powurf:long_name2 = "powurf(mrfn+1)=power summed over modes" ;
		powurf:units = "Watts" ;
	double rfpwr(tdim, mrfnp3_dim, rdim) ;
		rfpwr:long_name0 = "RF power densities (powrf(*,1:mrfn)):" ;
		rfpwr:long_name1 = "rfpwr(*,1:mrfn)=pwr den from individual modes" ;
		rfpwr:long_name2 = "rfpwr(*,mrfn+1)=powrft()" ;
		rfpwr:long_name3 = "Summed rf+nbi pwr den: sorpwt(*,mrfn+2)=" ;
		rfpwr:long_name4 = "Radially integrated: sorpwti(*,mrfn+3)=" ;
		rfpwr:units = "Watts/cm**3, except Watts for sorpwti" ;
	double powrf(tdim, nmodsdim, rdim) ;
		powrf:long_name0 = "RF power densities due to mode (or harmonic for" ;
		powrf:long_name1 = "nharms.gt.1 cases [powrf(lrza,nmodsa)])" ;
		powrf:units = "Watts/cm**3" ;
	int nrfspecies(nmodsdim) ;
		nrfspecies:long_name = "nrfspecies(nmodsa)= general species index for each wave type" ;
	double powrfl(tdim, nmodsdim, rdim) ;
		powrfl:long_name0 = "RF power densities due to salphal(1:nmodsdim)" ;
		powrfl:long_name1 = "(For multi-harmonic or multi-mode cases)" ;
		powrfl:units = "Watts/cm**3" ;
	double powurfl(tdim, nmodsdim) ;
		powurfl:long_name0 = "Tot RF power absrbd due to salphal(1:nmodsdim)" ;
		powurfl:long_name1 = "(For multi-harmonic or multi-mode cases)" ;
		powurfl:units = "Watts" ;
	double powrfc(tdim, nmodsdim, rdim) ;
		powrfc:long_name0 = "Coll RF power densities due to salphac(1:nmodsdim)" ;
		powrfc:long_name1 = "(For multi-harmonic or multi-mode cases)" ;
		powrfc:units = "Watts/cm**3" ;
	double powurfc(tdim, nmodsdim) ;
		powurfc:long_name0 = "Tot Coll RF pwr absrbd due to salphac(1:nmodsdim)" ;
		powurfc:long_name1 = "(For multi-harmonic or multi-mode cases)" ;
		powurfc:units = "Watts" ;
	double powrft(tdim, rdim) ;
		powrft:long_name0 = "RF power densities summed over modes or harmonics," ;
		powrft:long_name1 = "due to urf, collisional and add. linear abs" ;
		powrft:units = "Watts/cm**3" ;
	double curtor(tdim, r0dim) ;
		curtor:long_name = "Toroidal current density at min B pt" ;
		curtor:units = "Amps/cm**2" ;
	double ccurtor(tdim, r0dim) ;
		ccurtor:long_name = "Area Integrated toroidal current" ;
		ccurtor:long_name1 = "accounting for pol variation of tor cur" ;
		ccurtor:units = "Amps" ;
	double curpol(tdim, r0dim) ;
		curpol:long_name = "Poloidal current density at min B pt" ;
		curpol:units = "Amps/cm**2" ;
	double ccurpol(tdim, r0dim) ;
		ccurpol:long_name = "Integrated poloidal current density at min B" ;
		ccurpol:units = "Amps" ;
	double currm_e(tdim, r0dim) ;
		currm_e:long_name0 = "Parallel elec current density at min B" ;
		currm_e:long_name1 = "Electrons, or first gen species if kelecg=0" ;
		currm_e:units = "Amps/cm**2" ;
	double curr(tdim, gen_species_dim, r0dim) ;
		curr:long_name0 = "FSA Parallel current" ;
		curr:long_name1 = "i.e., Par curr per poloidal area between FSs" ;
		curr:units = "Amps/cm**2" ;
	double energym(tdim, gen_species_dim, r0dim) ;
		energym:long_name = "Energy per particle, from f0 at midplane" ;
		energym:units = "keV" ;
	double restp(tdim, r0dim) ;
		restp:long_name = "<E_phi/R>/<j_phi/R>" ;
		restp:units = "cgs, seconds" ;
	double restnp(tdim, r0dim) ;
		restnp:long_name = "neoclassical resist <E_parall*B>/<j_parall*B>" ;
		restnp:units = "cgs, seconds" ;
	double sptzrp(tdim, r0dim) ;
		sptzrp:long_name0 = "Spitzer resistivity, incl Zeff dependence" ;
		sptzrp:long_name1 = "Eq. 4.2-77 of ONETWO Manual, Eq. 5.66 H&H" ;
		sptzrp:units = "cgs, seconds" ;
	double rovsc(tdim, r0dim) ;
		rovsc:long_name0 = "Connor resistivity over Spitzer" ;
		rovsc:long_name1 = "J.W. Connor et al, Nucl Fus 13, 211 (1973)" ;
	double rovsc_hi(tdim, r0dim) ;
		rovsc_hi:long_name0 = "Connor resistivity over Spitzer, hi eps" ;
		rovsc_hi:long_name1 = "J.W. Connor et al, Nucl Fus 13, 211 (1973)" ;
	double zreskim(tdim, r0dim) ;
		zreskim:long_name0 = "Hirshman/Sigmar/Kim resistivity over Spitzer" ;
		zreskim:long_name1 = "Reference is Hir/Sig (~1988) and Kim theses" ;
	double taueeh(tdim, r0dim) ;
		taueeh:long_name = "Hinton-Hazeltine(Eq 5.4)-ONETWO-taue" ;
	double nuestar(tdim, r0dim) ;
		nuestar:long_name = "ONETWO Manual, Eq. 4.2-30" ;
	double powers(tdim, gen_species_dim, thirteendim, rdim) ;
		powers:long_name0 = "Component by component FSA powers to gen species k vs t" ;
		powers:long_name1 = "powers(*,1,k,t)=due to collisions with Maxw electrons" ;
		powers:long_name2 = "powers(*,2,k,t)=due to collisions with Maxw ions" ;
		powers:long_name3 = "powers(*,3,k,t)=Ohmic E.v" ;
		powers:long_name4 = "powers(*,4,k,t)=due to collisions with general spec" ;
		powers:long_name5 = "powers(*,5,k,t)=RF power" ;
		powers:long_name6 = "powers(*,6,k,t)=Ion particle source" ;
		powers:long_name7 = "powers(*,7,k,t)=losses by lossmode" ;
		powers:long_name8 = "powers(*,8,k,t)=losses by torloss" ;
		powers:long_name9 = "powers(*,9,k,t)=Runaway losses" ;
		powers:long_name10 = "powers(*,10,k,t)=Synchrotron radiation losses" ;
		powers:long_name11 = "powers(*,11,k,t)=Setting neg. j to zero" ;
		powers:long_name12 = "powers(*,12,k,t)=Phenomenological losses" ;
		powers:long_name13 = "powers(*,13,k,t)=Total" ;
		powers:units = "Watts/cm**3" ;
	double powers_int(tdim, gen_species_dim, thirteendim) ;
		powers_int:long_name0 = "Vol int of FSA powers, respectively, to gen species k vs t" ;
		powers_int:units = "Watts" ;
	double f(gen_species_dim, rdim, xdimf, ydimf) ;
		f:long_name = "Distribution function" ;
		f:units = "vnorm**3/(cm**3*(cm/sec)**3)" ;
		f:comment = "Additional dimension added for multi-species" ;
	double currv(gen_species_dim, rdim, xdim) ;
		currv:long_name = "Specific Current Density j_u(u)" ;
		currv:units = "Amps/cm^2 (int:0,1 over dx =current density)" ;
		currv:comment = "Setup for multi-species" ;
	double pwrrf(gen_species_dim, rdim, xdim) ;
		pwrrf:long_name = "Specific RF Power Density pwrrf(u)" ;
		pwrrf:units = "W/cm^3 (int:0,1 over dx =RF power density)" ;
		pwrrf:comment = "Setup for multi-species" ;
	double favr_thet0(gen_species_dim, rdim, xdim) ;
		favr_thet0:long_name = "Distr function at midplane averaged over pitch angle" ;
		favr_thet0:units = "vnorm**3/(cm**3*(cm/sec)**3)" ;
		favr_thet0:comment = "Setup for multi-species." ;

// global attributes:
		:title = "Main netcdf output from CQL3D version: cql3d_git_210125.1" ;
		:long_name0 = "Normalized hot ion birth rate" ;
data:
}
